################################################################################
#
# Backend
#
################################################################################

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
# backend = "xrender";
backend = "glx";

################################################################################
#
# GLX Backend
#
################################################################################

glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing
# them all.
glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sup_bufer to do bartial screen update.
# Overrides --glx-copy-from-front
# glx-use-copysubbuffermesa = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is
# known to break things on some drivers (LLVMpipe).
# Recommended if it works.
# glx-no-rebind-pixmap = true;

# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers.
# 2-5 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GTX_EXT_buffer_age, supported by some
# drivers.
# Useless with --glx-use-copysubbeffermesa.
# Partially breaks --resize-damage
# Defaults to undefined;
glx-swap-method = "undefined";

# glx-use-gpushader4 = true;

################################################################################
#
# X Render Backend
#
################################################################################

# xrender-sync = true;
# xrender-sync-fence = true;

################################################################################
#
# Shadow
#
################################################################################

# Enabled client-side shadows on windows.
shadow = true;
# Don’t draw shadows on DND windows.
no-dnd-shadow = true;
# Avoid drawing shadows on dock/panel windows.
no-dock-shadow = true;
# Zero the part of the shadow’s mask behind the window. Fix some weirdness with
# ARGB windows.
clear-shadow = true;
# The blur radius for the shadow (default 12)
shadow-radius = 7;
# The left offset for shadows. (default -15)
shadow-offset-x = -5;
# The top offset for shadows. (default -15)
shadow-offset-y = -5;
# The translucency for shadows. (defalt .75)
shadow-opacity = 0.85;

# Set if you want different colour shadows
# RGB calculate: 128*100/255/100 = 0.50
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;

# The shadow exclude options are helpful if you have shadows enabled. Due to the
# way compton draws its shadows, certain applications will have visual glitches.
# (most applications are fine, only apps that do weird things with xshapes or
# argb are affected)
shadow-exclude = [
  "name = 'Notification'",
  # "class_g = 'Conky'",
  # "class_g ?= 'Notify-osd'",
  # "class_g = 'Cairo-clock'",
  "_GTK_FRAME_EXTENTS@:c"
];
# Avoid drawing shadow on all shaped windows
# (see also: --detect-rounded-corners)
shadow-ignore-shaped = false;

# shadow-exclude = "n:e:Notification";
# shadow-exclude-reg = "x10+0+0";
# xinerama-shadow-crop = true;

################################################################################
#
# Opacity
#
################################################################################

menu-opacity = 0.9;
inactive-opacity = 0.6;
active-opacity = 1;
frame-opacity = 0.6;
inactive-opacity-override = true;
alpha-step = 0.06;

# Dim inactive windows. (0.0 - 1.0)
# inactive-dim = 0.2;
# Do not let dimness adjust based on window opacity
# inactive-dim-fixed = true;

# Blur backgound of transparent windows. Bad performance with X Render backend.
# GLX is preffered.
blur-method = "kawase";
blur-strength = 12;
blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
blur-background = true;
# Blur background of opaque windows with transparent frames as well.
# blur-background-frame = true;
# Do not let blur radius adjust based on window opacity
blur-background-fixed = false;
blur-background-exclude = [
  "window_type = 'desktop'",
  "class_g = 'Polybar'",
  "_GTK_FRAME_EXTENTS@:c"
];
opacity-rule = [
  "70:class_g = 'UXTerm'",
  "65:class_g = 'Polybar'",
  "80:class_g = 'St'"
];

################################################################################
#
# Fading
#
################################################################################

# Fade windows during opacity changes
fading = true;
# The time between steps in a fade in milliseconds. (default 10)
fade-delta = 50;
# Opacity change between steps while fading in. (default 0.028)
fade-in-step = 0.09;
# Opacity change between steps while fading out. (default 0.03)
fade-out-step = 0.08;
# Fade windows in/out when opening/closing
no-fading-openclose = true;
# no-fading-destroyed-argb = true;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [ ];

################################################################################
#
# Other
#
################################################################################

# Try to detect WM windows and mark them as active
mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus)
mark-ovredir-focused = true;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of
# using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;
# Detect rounded corners and treat them as rectangular when
# --shadow-ignore-shaped is on
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not
# passing _NET_WN_OPACITY of client windows to frame windows.
# This prefents opacity being ignored for some apps.
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, compton will try detecting this with X RandR extension.
refresh-rate = 60;

# Set VSync method. VSync methods currently available:
# none: No VSync
# drm: VSync with DRM_IOCTL_WAIT_VBLANK. May only work on some drivers.
# opengl: Try to VSync with SGI_video_sync OpenGL extension. Only work on some
#         drivers
# opengl-oml: Try to VSync with OML_sync_control OpenGL extension. Only work on
#             some drivers.
# opengl-swc: Try to VSync with SGI_swap_control OpenGL extension. Only work on
#             some drivers. Work only with a GLX backend. Known to be most
#             effective on many drivers. Does not actually control paint timing,
#             only buffer swap is affected, so it doesn’t have the effect of
#             --sw-opti unlike other methods. Experimental.
# opengl-mswc: Try to VSync with MESA_swap_control OpenGL extension. Basically
#              the same as opengl-swc above, except the extension we use.
# (Note some VSync methods may not be enabled at compile time.)
vsync = "none";

# Enable DPE painting mode, inteded to use with VSync to (hopefuly) eliminate
# tearing.
# Reported to have no effect though.
dbe = false;
# Painting on X Composite overlay window. Recommended.
paint-on-overlay = true;

# Limit comtpon to repaint at most every 1 / refresh_rate second to boost
# performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially
# do --sw-opti’ job already.
# Unless you wish to specify a lower refresh rate than the actual value.
sw-opti = false;

# Unredirect all windows if a full-screen opaque window is detected, to maximize
# performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
# paint-on-overlay may make the flickering less obvious.
# unredir-if-possible = true;
# unredir-if-possible-delay = 5000;
# unredir-if-possible-exclude = [ ];

# Specify a list of conditions of windows that should always be considered
# focused
focus-exclude = [
  # "class_g = 'Cairo-clock'"
];

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group
# focused at the same time
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group
# focused at the same time.
# WM_TRANSIENT_FOR has a higher priority if --detect-transient is enabled, too.
detect-client-leader = true;


invert-color-include = [ ];
# resize-damage = 1;

################################################################################
#
# Window type settings
#
################################################################################

wintypes:
{
  tooltip =
  {
    # fade: Fade the particular type of windows.
    fade = false;
    # shadow: Give those windows shadows.
    shadow = true;
    # opacity: Default opacity for the type of windows.
    opacity: 0.85;
    # focus: Whether to always consider windows of this type focused.
    focus = true;
  }
};
