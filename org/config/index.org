# -*- org-confirm-babel-evaluate: nil  -*-
#+TITLE: Phundrak’s dotfiles
#+setupfile: headers
#+OPTIONS: unique-id:t
#+HTML_HEAD_EXTRA: <meta name="description" content="Phundrak's dotfiles" />
#+HTML_HEAD_EXTRA: <meta property="og:title" content="Phundrak's dotfiles" />
#+HTML_HEAD_EXTRA: <meta property="og:description" content="Description of the dotfiles of Phundrak" />

* Presentation
:PROPERTIES:
:CUSTOM_ID: Presentation-981f2f04
:END:
This is my collection of dotfiles for my daily GNU/Linux environment, tweaked to
my liking. If you wish to get the same setup as mine, follow the instructions
below.

For starters, here is the link to all the pages on my website that you might
find interesting. I’ll describe them in more details below.
#+include: sitemap.org

As you can see, I personally use [[https://fishshell.com/][fish]] as my shell of choice, and [[https://www.gnu.org/software/emacs/][Emacs]]
29.0 as my main text editor.

When it comes to my graphical UI, I do not have any desktop
environment. Instead, I have a tiling window managers, [[https://stumpwm.github.io/][StumpWM]]. I used
to use [[https://github.com/Airblader/i3][i3-gaps]], an [[https://i3wm.org/][i3]] fork by [[https://github.com/Airblader/i3][Airblader]], with which I used [[https://polybar.github.io/][Polybar]] as
well as [[https://github.com/dylanaraps/pywal][pywal]] to define my system’s color scheme, and then I used
[[file:Deprecated/awesome.org][Awesome]]. But now, as said above, I prefer to use StumpWM. It has a
built-in status bar (called a mode-line, like in Emacs) which I use,
and I settled on the dark [[https://www.nordtheme.com/][Nord theme]] for pretty much everything I use.

Finally, you can find my configuration for my ErgodoxEZ keyboard [[https://configure.ergodox-ez.com/ergodox-ez/layouts/5WrVw/latest/0][here]]. It is
optimized for usage with the Bépo layout set as a software layout. It has also a
layer set to emulate a Qwerty layout when using the Bépo software layout due to
some games that do not offer to remap keys (I’m looking at you, Among Us).

* Features
:PROPERTIES:
:CUSTOM_ID: Features-5ab2a2c0
:END:
- Emacs' configuration perfectly tailored for my own use
- Beautiful and comfy StumpWM configuration
- And enough information below to get basically the same distro
  install as I have on computer.

Most of the org files you will find in this repo are the actual source
code of much of my config files. For instance, the bootstrap found in
[[file:bootstrap.org][bootstrap.org]] exports almost all of its code snippets to
=$HOME/.config/yadm/bootstrap= thanks to =M-x org-babel-tangle= from
within Emacs. Below I will also present and comment some of my short
config files which do not deserve to have a full org file dedicated to
them.

** Tiling Window Managers
:PROPERTIES:
:CUSTOM_ID: Features-Tiling_Window_Managers-da221e37
:END:
*** StumpWM
:PROPERTIES:
:CUSTOM_ID: Features-Tiling-Window-Managers-StumpWM-u9kdbd6137j0
:END:
StumpWM is the tiling window manager I use at the moment. It is
written and configured in Common Lisp, which I enjoy a lot since it
has a syntax quite close to Elisp, the Lisp dialect used in Emacs. I’m
currently still in the process of figuring out my config, so please
consider it as a kind of work in progress. You can find the
configuration [[file:stumpwm.org][here]].

*** AwesomeWM (Deprecated)
:PROPERTIES:
:CUSTOM_ID: Features-Tiling_Window_Managers-AwesomeWM-2eac61a9
:END:
AwesomeWM is the TWM I used for quite some time after switching from
i3. This is an automatic tiling window manager written and configured
mostly in Lua, with its core written in C (this is originally a dwm
fork). My configuration for it is documented in detail in its
corresponding document, which you can find [[file:Deprecated/awesome.org][here]].

*** i3 configuration (Deprecated)
:PROPERTIES:
:CUSTOM_ID: Features-Tiling_Window_Managers-i3_configuration-9c92e43c
:END:
The i3 configuration is detailed in its corresponding README which you
can find [[file:Deprecated/i3.org][here]]. Be aware I do not use i3 anymore, and I will not update
it until I may someday use it again. This was deprecated on August
22nd, 2020.

**** Polybar config (Deprecated)
:PROPERTIES:
:CUSTOM_ID: Features-Polybar_config_(Deprecated)-c8f95774
:END:
My annotated polybar config can be found [[file:Deprecated/polybar.org][here]], if you wish to use it.
Be aware I do not use polybar anymore, and I will not update it until
I may someday use it again. This was deprecated on August 22nd, 2020.

** Text and source code editing
:PROPERTIES:
:CUSTOM_ID: Features-Text_and_source_code_editing-63cc66d5
:END:
*** Emacs configuration
:PROPERTIES:
:CUSTOM_ID: Features-Text_and_source_code_editing-Emacs_configuration-ef937102
:END:
Emacs is my main text editor, which I use for almost everything.
Because, you know…
#+begin_quote
Emacs is a great operating system, it just lacks a good text editor.
#+end_quote

My current configuration is a vanilla config, meaning I do not rely on
another configuration or framework such as Spacemacs or DoomEmacs to
configure Emacs. You can find its configuration [[file:emacs.org][here]].

I used to use a Spacemacs-based configuration, however I deprecated it
on October 20th 2021. You can find it [[file:Deprecated/spacemacs.org][here]].

*** Nano (deprecated)
:PROPERTIES:
:CUSTOM_ID: Features-Text_and_source_code_editing-Nano-a9d4839f
:END:
Although it is a very simple piece of software, nano does offer some
customization. Mine can be found in my [[file:Deprecated/nano.org][nano.org]] file. Be aware I do
not use nano anymore, and I will not update it until I may someday use
it again. This was deprecated on August 28th, 2020.

*** Rustfmt
:PROPERTIES:
:CUSTOM_ID: Features-Text_and_source_code_editing-Rustfmt-2c4ac0b3
:END:
You can find my Rustfmt configuration [[file:rustfmt.org][here]].

** Custom scripts in =PATH=
:PROPERTIES:
:CUSTOM_ID: Features-Custom_scripts_in_=PATH=-043e8c8e
:END:
I have written some scripts that help me daily accomplish some simple
tasks, like mounting and unmounting a drive or Android device, an
emoji picker, a utility to set up my Wacom tablet, and so on. You can
find them stored in my [[file:bin.org][bin.org]] file along with their detailed
explanation in the README placed in the same folder —which is actually
their source code once the org-mode file gets tangled.

** Terminal configuration
:PROPERTIES:
:CUSTOM_ID: Features-Terminal-configuration-9662b145
:END:
*** Fish configuration with useful abbreviations
:PROPERTIES:
:CUSTOM_ID: Features-Fish_configuration_with_useful_abbreviations-c71ffba0
:END:
You can also find in my Fish shell configuration in my [[file:fish.org][fish.org]] file,
which contains my usual abbreviations.

*** Tmux configuration
:PROPERTIES:
:CUSTOM_ID: Features-Tmux_configuration-ce76e030
:END:
You can find my tmux configuration in [[file:tmux.org][tmux.org]]. It depends on the submodule
[[https://github.com/gpakosz/.tmux.git][.tmux]] by [[https://pempek.net/][Gregory Pakosz]].

** And some minor configuration files
:PROPERTIES:
:CUSTOM_ID: Features-And_some_minor_configuration_files-d5cec319
:END:
*** Global gitignore
:PROPERTIES:
:HEADER-ARGS: :mkdirp yes :tangle ~/.gitignore_global
:CUSTOM_ID: Features-And_some_minor_configuration_files-Global_gitignore-42467108
:END:
Sometimes, there are some lines that always reappear in gitignores.
So, instead of always adding them, let git now that some elements are
to be ignored by default, hence the ~$HOME/.gitignore_global~ file.
First, we don’t want nano’s backup files.
#+BEGIN_SRC fundamental
,*~
#+END_SRC

And object files and output binaries generated by =gcc= and the likes aren’t
welcome either.
#+BEGIN_SRC fundamental
,*.out
,*.o
#+END_SRC

*** Paru
:PROPERTIES:
:CUSTOM_ID: Features-And-some-minor-configuration-files-Paru-1f3ef49e
:END:
~paru~ is an AUR helper for Arch Linux which aims to be a replacement
for ~yay~. A couple of the options you will see below aim at restoring
the behavior of ~yay~ in ~paru~. Sudo loop avoids me having to enter again
my password if one package takes too much time to compile and/or
compress. I know it can be a security issue if someone ever get access
to my computer while paru is running, but if it ever happens it will
be already concerning enough they managed to. I also make use of [[file:bin.org::#Emacs-stuff-Dired-2eeca9da][my
custom script dired]] so I can use Emacs’ Dired as the file manager
for ~paru~.
#+BEGIN_SRC conf :tangle ~/.config/paru/paru.conf :mkdirp yes
[options]
BottomUp
Devel
DevelSuffixes = -git -cvs -svn -bzr -darcs -always
NewsOnUpgrade
PgpFetch
Provides
RemoveMake
SudoLoop
UpgradeMenu

[bin]
FileManager = dired
#+END_SRC

* Installation
:PROPERTIES:
:CUSTOM_ID: Installation-9ec2ae86
:END:
For an installation walkthrough of my Arch Linux installation, check
out my [[file:bootstrap.org][bootstrap]] file where I walk you through the first manual steps
and through the bootstrap you can execute to automatically take care
of a lot of elements.

* License
:PROPERTIES:
:CUSTOM_ID: License-48911096
:END:
All of my dotfiles (and my dotfiles only) are available under the GNU
GPLv3 License. Please consult [[https://labs.phundrak.com/phundrak/dotfiles/src/branch/master/LICENSE.md][the license file]] for more information.
In short: you are free to access, edit and redistribute all of my
dotfiles under the same license and as allowed by the license, and if
you fuck up something, it’s your own responsibility.
